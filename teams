#!/bin/env python
import os, sys, csv, sr, re

def get_team(num):
    return sr.group( "team%i" % num )

def get_college(num):
    return sr.group( "college-%i" % num )

def search_colleges(s):
    "Search through the colleges to find one with s its name"
    groups = sr.groups.list("college-*")

    res = []

    for gname in groups:
        group = sr.group(gname)

        if s.upper() in group.desc.upper():
            res.append(group)

    return res    

def college_find( numsub ):
    colnum = None
    try:
        colnum = int(numsub)
    except ValueError:
        pass

    if colnum == None:
        cols = search_colleges(numsub)
    else:
        return get_college(colnum)

    if len(cols) > 1:
        # TODO: prompt the user
        print "\"%s\" matches more than one college." % numsub
        sys.exit(1)

    if len(cols) == 0:
        print "\"%s\" matches no colleges." % numsub
        sys.exit(1)

    return cols[0]

class CmdBase:
    def __init__(self, args):
        abort = False

        if hasattr(self, "min_args") and len(args) < self.min_args:
            print "Too few arguments to command."
            abort = True

        if hasattr(self, "max_args") and len(args) > self.max_args:
            print "Too many arguments to command"
            abort = True

        if abort:
            if hasattr(self, "usage"):
                print "Usage: %s" % self.usage
            sys.exit(1)

class CmdTeamList(CmdBase):
    desc = "List the teams"
    max_args = 0

    def __init__(self, args):
        CmdBase.__init__(self, args)

        glist = sr.groups.list()

        for gname in glist:
            if re.match( "^team[0-9]+$", gname ) == None:
                continue

            print gname

class CmdTeamCreateCSV(CmdBase):
    desc = "Create a new team from a CSV file"
    usage = "COLLEGE_(NUMBER|SUBSTR) CSV_FILE"
    min_args = 2

    def __init__(self, args):
        CmdBase.__init__(self, args)
        CDESC, CSV_FNAME = args[0], args[1]

        cg = college_find( CDESC )
        r = csv.reader(open( CSV_FNAME, "r" ))

        for row in r:
            fname, lname, email = row


class CmdTeamInfo(CmdBase):
    desc = "Show information about a team"
    usage = "TEAM_NUMBER"
    min_args, max_args = 1, 1

    def __init__(self, args):
        CmdBase.__init__(self, args)

        tg = get_team(int(args[0]))
        if not tg.in_db:
            print "Team %i do not exist" % int(args[0])
            sys.exit(1)

        # Group people into teachers, students, mentors and misc:
        g = ["teachers", "students", "mentors"]
        groups = {}
        team_grouped = {}

        for gname in g:
            groups[gname] = sr.group(gname)
            team_grouped[gname] = []

        for uname in tg.members:
            for gname, g in groups.iteritems():
                if uname in g.members:
                    team_grouped[gname].append(uname)

        if hasattr(tg, "desc"):
            print "Team %i: %s" % (int(args[0]), tg.desc)
        else:
            print "Team", int(args[0]), "(no description)"
        print

        for status, ulist in team_grouped.iteritems():
            if len(ulist):
                print len(ulist), "%s:" % status
                ulist.sort()

                for u in ulist:
                    print "\t%s" % u
                print
            else:
                print "No %s." % status

        # Work out what college they're from
        college_gnames = set()

        for uname in team_grouped["students"] + team_grouped["teachers"]:
            u = sr.user(uname)
            assert u.in_db

            for gname in u.groups():
                if re.match( "^college-[0-9]+$", gname ) != None:
                    college_gnames.add( gname )

        college_gnames = list(college_gnames)
        college_gnames.sort()
        if len(college_gnames):
            print "Colleges:"
            for gname in college_gnames:
                print  "\t%s" % gname
        else:
            print "No associated college."

class CmdCollegeList(CmdBase):
    desc = "List colleges"
    max_args = 0

    def __init__(self, args):
        CmdBase.__init__(self, args)

        glist = sr.groups.list()

        for gname in glist:
            if re.match( "^college-[0-9]+$", gname ) == None:
                continue

            g = sr.group(gname)

            if hasattr(g, "desc"):
                desc = g.desc
            else:
                desc = "(no description)"

            print "%s: %s" % (gname, desc)

class CmdCollegeCreate(CmdBase):
    desc = "Create a new college"
    usage = "colleges create DESCRIPTION"
    min_args, max_args = 1,1

    def __init__(self, args):
        CmdBase.__init__(self, args)
        desc = args[0]

        g = self.next_free_college()
        g.desc = desc
        g.save()

        print "Created college group \"%s\"" % g.name

    def next_free_college(self):
        i = 1

        while True:
            cg = get_college(i)
            if not cg.in_db:
                return cg
            i += 1

class CmdTeams:
    desc = "Team management commands"
    cmds = { "list": CmdTeamList,
             "from-csv": CmdTeamCreateCSV,
             "info": CmdTeamInfo } 

    def __init__(self, args):
        if len(args) < 1 or args[0] not in self.cmds:
            if len(args):
                print "Invalid command"

            print "Usage: teams teams CMD"
            print "Where command can be:"
            for cmd_name, cmdf in self.cmds.iteritems():
                print "\t%s: %s" % ( cmd_name, cmdf.desc )
            sys.exit(1)

        self.cmds[args[0]](args[1:])

class CmdColleges:
    desc = "Team management commands"
    cmds = { "list": CmdCollegeList,
             "create": CmdCollegeCreate } 

    def __init__(self, args):
        if len(args) < 1 or args[0] not in self.cmds:
            if len(args):
                print "Invalid command"

            print "Usage: teams colleges CMD"
            print "Where command can be:"
            for cmd_name, cmdf in self.cmds.iteritems():
                print "\t%s: %s" % ( cmd_name, cmdf.desc )
            sys.exit(1)

        self.cmds[args[0]](args[1:])

cmds = { "teams" : CmdTeams,
         "colleges" : CmdColleges }

if len(sys.argv) < 2:
    print "Usage: teams CMD [ARGS]"
    print "Available commands:"
    for cmd in cmds.keys():
        print "\t",cmd
    sys.exit(1)

CMD = sys.argv[1]

if CMD not in cmds:
    print "Unknown command"
    sys.exit(1)

cmds[CMD](sys.argv[2:])
